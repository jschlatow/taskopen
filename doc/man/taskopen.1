'\" t
.\" Automatically generated by Pandoc 2.18
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "taskopen" "1" "" "Taskopen User Manual" "Version 2.0"
.hy
.SH NAME
.PP
taskopen - A companion application for taskwarrior that augments
annotation handling.
.SH SYNOPSIS
.PP
\f[V]taskopen [subcommand] [options] [filter1 filter2 .. filterN]\f[R]
.SH DESCRIPTION
.PP
Any task in taskwarrior can have zero-or-more annotations.
Originally, taskopen was created to extend the functionality of
taskwarrior with respect to annotations.
As taskwarrior lacks multi-line annotations, the idea was to
\f[I]attach\f[R] a notes file to a task and make it accessible by
taskopen instead.
In more general terms, taskopen is able to perform arbitrary actions on
tasks by executing external commands.
The actions applicable to a task are determined by filtering its
annotations (or any other task attribute).
.PP
In order to customise this, taskopen is configured with a set of
filters, actions and operation modes, see \f[B]taskopenrc\f[R](5).
When executed, it passes the given filter to taskwarrior, and presents
the user with a set of actions that it considers applicable to the
returned tasks.
.SS Filters
.PP
Taskwarrior has a large feature set for
filtering (https://taskwarrior.org/docs/filter.html) on a task-level
basis for generating the reports (task list).
However, as taskopen may offer multiple (and different) actions for
individual task attributes and annotations, it must perform additional
filtering.
.PP
In a first stage, the task filter is provided to taskopen on the command
line and passed to taskwarrior to limit the set of considered tasks.
In a second stage, taskopen checks what actions are applicable to these
tasks (i.e.\ their attributes).
.PP
By default, taskopen operates on the task annotations.
As a generalisation, other attributes can be processed and filtered to
determine the applicable actions.
.SS Annotations
.PP
An annotation in taskwarrior is a single-line of arbitrary text with a
timestamp.
A task can have multiple of these annotations.
For taskopen, the following format of annotations has been established:
.IP
.nf
\f[C]
label: arbitrary text (e.g. url, file path)
\f[R]
.fi
.PP
The label part is optional and used for further filtering (e.g.\ to
distinguish different actions on the same annotation).
Taskopen used the following perl regex for this:
.IP
.nf
\f[C]
(?:(\[rs]S+):\[rs]s+)?(.*)
\f[R]
.fi
.PP
The first match is called the \f[I]label part\f[R] whereas the second
match is the \f[I]file part\f[R].
Taskopen 2.0 allows filtering of both parts via regular expressions.
.SS Arbitrary attributes
.PP
A task in taskwarrior has various attributes (e.g.\ project, tags,
description).
Taskwarrior even supports user-defined attributes (UDAs), which can for
instance be used to link to an issue id of a bug tracker.
It therefore appears natural to use taskopen also for defining actions
on UDAs.
In contrast to annotation filtering, there is only a single regular
expression that is matched against the attribute\[cq]s value.
.SS Actions
.PP
An action defines what taskopen shall do with the filtered
annotations/attributes.
It is defined by four parameters: \f[I]target\f[R], \f[I]regex\f[R],
\f[I]command\f[R] and \f[I]modes\f[R].
The \f[I]target\f[R] specifies for what task attribute the action is
defined.
The \f[I]regex\f[R] defines the regular expression(s) used for
determining valid annotations/attributes.
The \f[I]command\f[R] determines the command line that implements the
actual action.
The following placeholders for defining the command line exist:
.TP
\f[V]$ANNOTATION\f[R]
the undecoded (raw) annotation text
.TP
\f[V]$LABEL\f[R]
the label part of the annotation text
.TP
\f[V]$FILE\f[R]
the file part of the annotation text
.TP
\f[V]$UUID\f[R]
the UUID of the task
.TP
\f[V]$ID\f[R]
the running ID of the task
.TP
\f[V]$ENTRY\f[R]
the entry date-time of the annotation
.TP
\f[V]$LAST_MATCH\f[R]
the last sub-pattern of the regular expression used for filtering
.TP
\f[V]$TASK_*\f[R]
any task attribute (e.g.\ \f[V]$TASK_PROJECT\f[R]) or UDA
.TP
\f[V]$ARGS\f[R]
user-defined arguments specified on the taskopen command line
.PP
The \f[I]modes\f[R] of an action is a list of valid modes in which the
action is applicable (see next section).
Optionally (for extensibility), a \f[I]filtercommand\f[R] can be
specified to implement additional filters such as file type checking.
Furthermore, an \f[I]inlinecommand\f[R] can be defined to execute a
particular command for every actionable annotation and display its
output interleaved with the list of actionable annotations.
If an action targets annotations, a \f[I]labelregex\f[R] may specify a
regular expressions that is applied to the label part.
For a detailed descripton of the configuration, please refer to
\f[B]taskopenrc\f[R](5).
.SS Operation modes
.PP
Taskopen implements multiple modes of operation:
.TP
normal mode
In \f[I]normal mode\f[R], taskopen shows a list of actionable
annotations and executes the first matching action for the annotation
selected by the user.
.TP
batch mode
In \f[I]batch mode\f[R], taskopen performs the first matching action on
every actionable annotation.
.TP
any mode
Taskopen 2.0 introduced an additional \f[I]any mode\f[R] similar to
normal mode that presents the user with all matching actions to choose
from instead of only the first matching action.
.PP
Note that earlier versions of taskopen also supported modes for editing
annotations and deleting annotations.
Since taskopen 2.0, these are implemented by actions.
.SH OPTIONS
.PP
Options of taskopen are subdivided into four categories: output control,
config overrides, includes/excludes, and filter control.
.PP
A special case for \f[V]--config\f[R] is when the config file does not
exist.
Taskopen will ask the user whether the config file with default values
shall be created.
.PP
For some options, there exists a short variant (\f[V]-\f[R]) and a long
variant (\f[V]--\f[R]).
Provided values must be separated by a \f[V]:\f[R] or \f[V]=\f[R] when
using the short variant.
.SS Output control
.TP
\f[V]-v/--verbose\f[R]
Prints additional info messages (e.g.\ the command line to be executed
by taskopen).
.TP
\f[V]--debug\f[R]
Prints debug messages (includes \f[V]-v\f[R]).
.TP
\f[V]-h/--help\f[R]
Prints help message.
.SS Config overrides
.TP
\f[V]-s=/--sort=key1+,key2-\f[R]
Changes the default sort order of annotations.
.TP
\f[V]-c=/--config=filepath\f[R]
Use a different config file.
.TP
\f[V]-a=/--active-tasks=filter\f[R]
Changes the filter used by taskopen to determine active tasks.
.TP
\f[V]-x=/--execute=cmd\f[R]
Overrides the command executed by taskopen for every action.
.TP
\f[V]-f=/--filter-command=cmd\f[R]
Overrides filter command for every action.
.TP
\f[V]-i=/--inline-command=cmd\f[R]
Overrides inline command for every action.
.TP
\f[V]--args=arguments\f[R]
Allows definition of arguments that will be available as \f[V]$ARGS\f[R]
in taskopen actions.
.SS Includes/excludes
.TP
\f[V]--include=action1,action2\f[R]
Only consider the listed actions.
Also determines their priority.
.TP
\f[V]--exclude=action1,action2\f[R]
Consider all but the listed actions.
.SS Filter control
.TP
\f[V]-A/--All\f[R]
Query all tasks, including completed and deleted tasks.
.SH SUBCOMMANDS
.PP
The modes of taskopen are made accessible via subcommands.
By default, taskopen operates in normal mode.
In addition to the following subcommands, custom aliases can be defined
in order to provide a short hand for common command line options.
.TP
\f[V]batch\f[R]
Switches into batch mode.
.TP
\f[V]any\f[R]
Switches into any mode.
.TP
\f[V]version\f[R]
Prints version information.
.TP
\f[V]diagnostics\f[R]
Prints diagnostics (e.g.\ configured actions, aliases, etc.)
.SH MIGRATION FROM TASKOPEN 1.x
.PP
The following table compares command line arguments of taskopen 1.x with
taskopen 2.0.
Note that the \f[V]--include/--exclude\f[R] options require the
definition of the appropriate actions in your config file.
Moreover, you are able to define aliases for convenience (see
\f[B]taskopenrc\f[R](5)).
.PP
.TS
tab(@);
lw(35.0n) lw(35.0n).
T{
Taskopen 1.x
T}@T{
Taskopen 2.0
T}
_
T{
\f[V]-h\f[R]
T}@T{
\f[V]-h\f[R] or \f[V]--help\f[R]
T}
T{
\f[V]-v\f[R]
T}@T{
\f[V]version\f[R]
T}
T{
\f[V]-V\f[R]
T}@T{
\f[V]diagnostics\f[R]
T}
T{
\f[V]-l\f[R]
T}@T{
\f[V]-x\f[R] or \f[V]--execute\f[R]
T}
T{
\f[V]-L\f[R]
T}@T{
\f[V]-v\f[R] or \f[V]--verbose\f[R]
T}
T{
\f[V]-b\f[R]
T}@T{
\f[V]batch\f[R]
T}
T{
\f[V]-n\f[R]
T}@T{
\f[V]--include=notes\f[R]
T}
T{
\f[V]-N\f[R]
T}@T{
\f[V]--exclude=notes\f[R]
T}
T{
\f[V]-f\f[R]
T}@T{
\f[V]--include=files\f[R]
T}
T{
\f[V]-F\f[R]
T}@T{
\f[V]--exclude=files\f[R]
T}
T{
\f[V]-B\f[R]
T}@T{
\f[V]-f=\[aq]test ! -e $FILE\f[R]
T}
T{
\f[V]-t\f[R]
T}@T{
\f[V]--include=text\f[R]
T}
T{
\f[V]-T\f[R]
T}@T{
\f[V]--exclude=text\f[R]
T}
T{
\f[V]-a\f[R]
T}@T{
\f[V]-a\f[R]
T}
T{
\f[V]-A\f[R]
T}@T{
\f[V]-A\f[R]
T}
T{
\f[V]-D\f[R]
T}@T{
\f[V]--include=delete\f[R]
T}
T{
\f[V]-r\f[R]
T}@T{
\f[V]--include=raw\f[R]
T}
T{
\f[V]-m \[aq]regex\[aq]\f[R]
T}@T{
\f[V]/regex/\f[R]
T}
T{
\f[V]--type \[aq]regex\[aq]\f[R]
T}@T{
\f[V]-f=\[dq]file $FILE \[rs]| perl -ne \[aq]if($_ !\[ti] m/regex/){exit 1}\[aq]\[dq]\f[R]
T}
T{
\f[V]-s key1+,key2-\f[R]
T}@T{
\f[V]-s=key1+,key2-\f[R]
T}
T{
\f[V]-e\f[R]
T}@T{
\f[V]-x=\[aq]vim $FILE\[aq]\f[R]
T}
T{
\f[V]-x \[aq]cmd\[aq]\f[R]
T}@T{
\f[V]-x=\[aq]cmd\[aq]\f[R]
T}
T{
\f[V]-i \[aq]cmd\[aq]\f[R]
T}@T{
\f[V]-i=\[aq]cmd\[aq]\f[R]
T}
T{
\f[V]-c filepath\f[R]
T}@T{
\f[V]-c=filepath\f[R]
T}
T{
\f[V]-p cmd\f[R]
T}@T{
automatic detection
T}
.TE
.SH FILES
.TP
\f[V]\[ti]/.taskopenrc\f[R]
User configuration file - see also \f[B]taskopenrc\f[R](5).
.TP
\f[V]\[ti]/.config/taskopen/taskopenrc\f[R]
Alternative location of user configuration file.
Takes precedence over the locations listed above.
.TP
\f[V]\[ti]/$XDG_CONFIG_HOME/taskopen/taskopenrc\f[R]
Alternative location of user configuration file.
Takes precedence over the locations listed above.
.TP
\f[V]$TASKOPENRC\f[R]
If set, the configuration file is loaded from the location specified by
the environment variable \f[V]$TASKOPENRC\f[R].
.SH HISTORY
.TP
\f[B]2010 - 2012\f[R]
The first release of taskopen was a quite simple bash script.
.TP
\f[B]early 2013\f[R]
Re-implementation of taskopen in perl.
.TP
\f[B]early 2021\f[R]
Re-implementation of taskopen in nim.
.TP
\f[B]mid 2022\f[R]
Release of taskopen 2.0.
.SH CREDITS & COPYRIGHTS
.PP
Copyright (C) 2010 - 2022, J.
Schlatow
.PP
Taskopen is distributed under the GNU General Public License.
See \f[I]http://www.opensource.org/licenses/gpl-2.0.php\f[R] for more
information.
.PP
Please also refer to the \f[B]AUTHORS\f[R] file for a list of
contributors.
.SH SEE ALSO
.PP
\f[B]taskopenrc\f[R](5)
.PP
For more information regarding taskopen, see the following:
.TP
The official site at
\f[I]<https://github.com/jschlatow/taskopen/>\f[R]
.TP
The official code repository at
\f[I]<git://github.com/jschlatow/taskopen.git>\f[R]
.TP
The wiki at
\f[I]<git://github.com/jschlatow/taskopen.git/wiki>\f[R]
.SH REPORTING BUGS
.TP
Bugs in taskopen may be reported to the issue-tracker at
\f[I]<https://github.com/jschlatow/taskopen/issues>\f[R]
